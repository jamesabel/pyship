import os
import datetime
from pathlib import Path
from semver import VersionInfo
import shutil

from typeguard import typechecked
from balsa import get_logger

from pyshipupdate import mkdirs, get_target_os
from pyship import __application_name__, AppInfo, subprocess_run, pyship_print, get_icon, PyshipLicenseFileDoesNotExist


log = get_logger(__application_name__)


@typechecked
def get_folder_size(folder_path: Path) -> int:
    """
    calculate folder size in bytes
    :param folder_path: folder path
    :return: folder size in bytes
    """
    total_size = 0
    for d, _, fns in os.walk(str(folder_path)):
        for f in fns:
            total_size += os.path.getsize(os.path.join(d, f))
    return total_size


@typechecked
def run_nsis(target_app_info: AppInfo, target_app_version: VersionInfo, app_dir: Path) -> Path:
    """
    run nsis
    :param target_app_info: target app info
    :param target_app_version: target app version
    :param app_dir: application dir
    :return: path to installer exe, or None if could not be created
    """

    # basic format is from:
    # http://nsis.sourceforge.net/A_simple_installer_with_start_menu_shortcut_and_uninstaller

    icon_path = get_icon(target_app_info, log.info)
    assert isinstance(target_app_info.name, str)
    shutil.copy2(icon_path, Path(app_dir, target_app_info.name, f"{target_app_info.name}.ico"))  # copy icon next to exe

    license_file_name = "LICENSE"

    if Path(target_app_info.project_dir, license_file_name).exists():
        nsis_file_path = Path(target_app_info.project_dir, f"{target_app_info.name}.nsi").absolute()
        pyship_print(f'building installer "{nsis_file_path}" ("{nsis_file_path.absolute()}")')

        exe_name = f"{target_app_info.name}.exe"
        installers_folder = "installers"
        mkdirs(Path(target_app_info.project_dir, installers_folder), remove_first=True)
        installer_exe_path = Path(installers_folder, f"{target_app_info.name}_installer_{get_target_os()}.exe")

        nsis_lines = []
        nsis_lines.append("")
        nsis_lines.append("# *** DO NOT EDIT ***")
        nsis_lines.append(f"# Programmatically generated by {__application_name__} on {str(datetime.datetime.now())}.")
        nsis_lines.append("")

        assert isinstance(target_app_info.author, str)
        company_name = target_app_info.author
        if " " in company_name:
            company_name = f'"{company_name}"'
        nsis_lines.append(f"!define COMPANYNAME {company_name}")

        nsis_lines.append(f"!define APPNAME {target_app_info.name}")
        nsis_lines.append(f"!define OSSPEC {get_target_os()}")
        nsis_lines.append(f"!define EXENAME {exe_name}")
        nsis_lines.append(f'!define DESCRIPTION "{target_app_info.description}"')  # the description must be in quotes

        nsis_lines.append(f"!define VERSIONMAJOR {target_app_version.major}")
        nsis_lines.append(f"!define VERSIONMINOR {target_app_version.minor}")
        nsis_lines.append(f"!define VERSIONBUILD {target_app_version.patch}")

        # These will be displayed by the "Click here for support information" link in "Add/Remove Programs"
        # It is possible to use "mailto:" links in here to open the email client
        nsis_lines.append(f"!define HELPURL {target_app_info.url}")  # "Support Information" link
        nsis_lines.append(f"!define UPDATEURL {target_app_info.url}")  # "Product Updates" link
        nsis_lines.append(f"!define ABOUTURL {target_app_info.url}")  # "Publisher" link

        installed_size = get_folder_size(app_dir) / 1024  # EstimatedSize is in KB
        nsis_lines.append(f"!define INSTALLSIZE {installed_size}")

        nsis_lines.append("")
        nsis_lines.append("RequestExecutionLevel admin ;Require admin rights on NT6+ (When UAC is turned on)")
        nsis_lines.append("")
        nsis_lines.append(r'InstallDir "$PROGRAMFILES\${COMPANYNAME}\${APPNAME}"')
        nsis_lines.append("")
        nsis_lines.append(r"# rtf or txt file - remember if it is txt, it must be in the DOS text format (\r\n)")
        nsis_lines.append('LicenseData "LICENSE"')
        nsis_lines.append(r"# This will be in the installer/uninstaller's title bar")
        nsis_lines.append('Name "${COMPANYNAME} - ${APPNAME}"')
        nsis_lines.append(f"Icon {icon_path}")
        nsis_lines.append(f'outFile "{installer_exe_path}"')
        nsis_lines.append("")
        nsis_lines.append("!include LogicLib.nsh")

        nsis_lines.append("")
        nsis_lines.append("page license")
        nsis_lines.append("page directory")
        nsis_lines.append("Page instfiles")

        nsis_lines.append("")
        nsis_lines.append("!macro VerifyUserIsAdmin")
        nsis_lines.append("UserInfo::GetAccountType")
        nsis_lines.append("pop $0")
        nsis_lines.append('${If} $0 != "admin" ;Require admin rights on NT4+')
        nsis_lines.append('  messageBox mb_iconstop "Administrator rights required!"')
        nsis_lines.append("  setErrorLevel 740 ;ERROR_ELEVATION_REQUIRED")
        nsis_lines.append("  quit")
        nsis_lines.append("${EndIf}")
        nsis_lines.append("!macroend")
        nsis_lines.append("")
        nsis_lines.append("function .onInit")
        nsis_lines.append("  setShellVarContext all")
        nsis_lines.append("  !insertmacro VerifyUserIsAdmin")
        nsis_lines.append("functionEnd")

        nsis_lines.append("")
        nsis_lines.append('section "install"')
        nsis_lines.append("  # Files for the install directory - to build the installer, these should be in the same directory as the install script (this file)")
        nsis_lines.append("  setOutPath $INSTDIR")
        nsis_lines.append('  # Files added here should be removed by the uninstaller (see section "uninstall")')
        nsis_lines.append(f"  File /r {app_dir}\\*")

        nsis_lines.append("")
        nsis_lines.append('  # Uninstaller - See function un.onInit and section "uninstall" for configuration')
        nsis_lines.append('  writeUninstaller "$INSTDIR\\uninstall.exe"')
        nsis_lines.append("  ")
        nsis_lines.append("  # Start Menu")
        nsis_lines.append('  createDirectory "$SMPROGRAMS\\${COMPANYNAME}"')
        nsis_lines.append('  createShortCut "$SMPROGRAMS\\${COMPANYNAME}\\${APPNAME}.lnk" "$INSTDIR\\${APPNAME}\\${EXENAME}" "" "$INSTDIR\\${APPNAME}\\${APPNAME}.ico"')
        nsis_lines.append("")

        if target_app_info.run_on_startup:
            nsis_lines.append("  # run on Windows startup")
            nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Run" "${APPNAME}" "$INSTDIR\\${APPNAME}\\${EXENAME}"')
            nsis_lines.append("")

        nsis_lines.append("  # Registry information for add/remove programs")
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "DisplayName" "${APPNAME}"')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "UninstallString" "$\\"$INSTDIR\\uninstall.exe$\\""')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "QuietUninstallString" "$\\"$INSTDIR\\uninstall.exe$\\" /S"')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "InstallLocation" "$INSTDIR"')
        nsis_lines.append(
            '  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "DisplayIcon" "$\\"$INSTDIR\\${APPNAME}\\${APPNAME}.ico$\\""'
        )
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "Publisher" "${COMPANYNAME}"')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "HelpLink" "${HELPURL}"')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "URLUpdateInfo" "${UPDATEURL}"')
        nsis_lines.append('  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "URLInfoAbout" "${ABOUTURL}"')
        nsis_lines.append(
            '  WriteRegStr HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "DisplayVersion" "${VERSIONMAJOR}.${VERSIONMINOR}.${VERSIONBUILD}"'
        )
        nsis_lines.append('  WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "VersionMajor" ${VERSIONMAJOR}')
        nsis_lines.append('  WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "VersionMinor" ${VERSIONMINOR}')
        nsis_lines.append('  WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "NoModify" 1')
        nsis_lines.append('  WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "NoRepair" 1')
        nsis_lines.append('  WriteRegDWORD HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}" "EstimatedSize" ${INSTALLSIZE}')
        nsis_lines.append("sectionEnd")

        # uninstall
        nsis_lines.append("# Uninstaller")
        nsis_lines.append("function un.onInit")
        nsis_lines.append("	 SetShellVarContext all")

        nsis_lines.append("  # Verify the uninstaller - last chance to back out")
        nsis_lines.append('	 MessageBox MB_OKCANCEL "Permanently remove ${APPNAME}?" IDOK next')
        nsis_lines.append("		Abort")
        nsis_lines.append("	 next:")
        nsis_lines.append("  !insertmacro VerifyUserIsAdmin")
        nsis_lines.append("functionEnd")

        nsis_lines.append('section "uninstall"')

        nsis_lines.append("  # Remove Start Menu launcher")
        nsis_lines.append('  delete "$SMPROGRAMS\\${COMPANYNAME}\\${APPNAME}.lnk"')
        nsis_lines.append("  # Try to remove the Start Menu folder - this will only happen if it is empty")
        nsis_lines.append('  rmDir "$SMPROGRAMS\\${COMPANYNAME}"')

        nsis_lines.append("  # Remove files")
        nsis_lines.append("  RMDir /r $INSTDIR\\${APPNAME}")
        nsis_lines.append("  RMDir /r $INSTDIR\\${APPNAME}_%s" % str(target_app_info.version))
        nsis_lines.append("  delete $INSTDIR\\${APPNAME}_%s.clip" % str(target_app_info.version))
        nsis_lines.append("  delete $INSTDIR\\*.json")
        # use these patterns so that we delete the uninstaller last
        nsis_lines.append("  delete $INSTDIR\\LICENSE")
        nsis_lines.append("  delete $INSTDIR\\COPY")  # for GPL

        nsis_lines.append("  # Always delete uninstaller as the last action")
        nsis_lines.append("  delete $INSTDIR\\uninstall.exe")

        nsis_lines.append("  # Try to remove the install directory - this will only happen if it is empty")
        nsis_lines.append("  rmDir $INSTDIR")
        nsis_lines.append('  rmDir "$PROGRAMFILES\\${COMPANYNAME}"')

        nsis_lines.append("  # Remove uninstaller information from the registry")
        nsis_lines.append('  DeleteRegKey HKLM "Software\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${COMPANYNAME} ${APPNAME}"')
        nsis_lines.append("sectionEnd")

        for nsis_line in nsis_lines:
            log.debug(nsis_line)

        with open(nsis_file_path, "w") as nsis_file:
            nsis_file.write("\n".join(nsis_lines))

        # run nsis
        make_nsis_path = os.environ.get("MAKE_NSIS_PATH", default=os.path.join("c:", os.sep, "Program Files (x86)", "NSIS", "makensis.exe"))
        if os.path.exists(make_nsis_path):
            subprocess_run([make_nsis_path, nsis_file_path], target_app_info.project_dir)
        else:
            log.fatal(f"{make_nsis_path} not found - see http://nsis.sourceforge.net to get NSIS (Nullsoft Scriptable Install System)")
            raise FileNotFoundError(make_nsis_path)

    else:
        log.error(f"{license_file_name} file does not exist at {target_app_info.project_dir}")
        raise PyshipLicenseFileDoesNotExist(target_app_info.project_dir)

    # return the actual path to the installer (we cd'd to target_app_project_dir when we ran nsis)
    installer_exe_path = Path(target_app_info.project_dir, installer_exe_path)

    return installer_exe_path
